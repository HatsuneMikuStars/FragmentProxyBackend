import { TonClient, WalletContractV4, beginCell, toNano, internal, Address, SendMode } from '@ton/ton';
import { mnemonicToPrivateKey } from '@ton/crypto';
import { IWalletService } from './IWalletService';
import { SendTransactionParams, TransactionResult, TransactionStatus, WalletConfig } from './models/walletModels';
import { WalletAccount } from '../api/models/apiModels';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON –∫–æ—à–µ–ª—å–∫–æ–º (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å V5 –∫–æ—à–µ–ª—å–∫–∞–º–∏)
 */
export class TonWalletService implements IWalletService {
  private client: TonClient | null = null;
  private wallet: WalletContractV4 | null = null;
  private keyPair: { publicKey: Buffer; secretKey: Buffer } | null = null;
  private config: WalletConfig | null = null;
  private isInitialized: boolean = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—à–µ–ª–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
   * @param config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
   */
  async initializeWallet(config: WalletConfig): Promise<void> {
    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ—à–µ–ª—å–∫–∞...");
      this.config = config;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç TON
      const endpoint = config.apiUrl || 
        (config.useTestnet ? 'https://testnet.toncenter.com/api/v2/jsonRPC' : 'https://toncenter.com/api/v2/jsonRPC');
      
      console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: ${endpoint}`);
      
      this.client = new TonClient({
        endpoint,
        apiKey: config.apiKey
      });
      
      console.log("üë§ –ö–ª–∏–µ–Ω—Ç TON —Å–æ–∑–¥–∞–Ω");
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É –≤ –∫–ª—é—á–∏
      const mnemonicArray = config.mnemonic.split(' ');
      console.log(`üîë –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É (${mnemonicArray.length} —Å–ª–æ–≤) –≤ –∫–ª—é—á–∏...`);
      this.keyPair = await mnemonicToPrivateKey(mnemonicArray);
      console.log("‚úÖ –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π subwalletId –∏–ª–∏ 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const subwalletId = config.subwalletId !== undefined ? config.subwalletId : 0;
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ—à–µ–ª—å–∫–∞
      const workchain = 0; // –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è workchain 0
      console.log(`üèóÔ∏è –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å subwalletId: ${subwalletId}`);
      
      // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å V5 –∫–æ—à–µ–ª—å–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º V4R2, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
      // –ü—Ä–∏ —ç—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID –∫–æ—à–µ–ª—å–∫–∞
      this.wallet = WalletContractV4.create({ 
        workchain, 
        publicKey: this.keyPair.publicKey,
        walletId: subwalletId
      });
      
      this.isInitialized = true;
      const walletAddress = await this.getWalletAddress();
      console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–¥—Ä–µ—Å: ${walletAddress}`);
      console.log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WalletContractV4 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å V5 –∫–æ—à–µ–ª—å–∫–æ–º. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ V5 –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: ${error.message}`);
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   * @throws Error –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   */
  private checkInitialization() {
    if (!this.isInitialized || !this.client || !this.wallet || !this.keyPair) {
      throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ initializeWallet()');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
   * @returns –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TON
   */
  async getWalletAddress(): Promise<string> {
    this.checkInitialization();
    return this.wallet!.address.toString();
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
   * @returns –ë–∞–ª–∞–Ω—Å –≤ –Ω–∞–Ω–æ–¢–û–ù
   */
  async getBalance(): Promise<bigint> {
    this.checkInitialization();
    
    if (!this.client || !this.wallet) {
      throw new Error("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const state = await this.client.getContractState(this.wallet.address);
      return BigInt(state.balance || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞');
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
   * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async sendTransaction(params: SendTransactionParams): Promise<TransactionResult> {
    this.checkInitialization();
    
    try {
      if (!this.client || !this.wallet || !this.keyPair) {
        throw new Error("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      }
      
      const maxRetries = params.maxRetries || 3;
      let lastError: Error | null = null;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç Address
      const toAddress = Address.parse(params.toAddress);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ –Ω–∞–Ω–æ–¢–û–ù
      let amount: bigint;
      if (typeof params.amount === 'string') {
        amount = BigInt(params.amount);
      } else if (typeof params.amount === 'number') {
        amount = BigInt(Math.floor(params.amount));
      } else {
        amount = params.amount;
      }
      
      // –†–µ–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${attempt}/${maxRetries}`);
          
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫
          const walletContract = this.client.open(this.wallet);
          const seqno = await walletContract.getSeqno();
          console.log(`–¢–µ–∫—É—â–∏–π seqno: ${seqno}`);
          
          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const msgParams = {
            to: toAddress,
            value: amount,
            bounce: false,
            sendMode: SendMode.PAY_GAS_SEPARATELY | SendMode.IGNORE_ERRORS
          };
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          let msgBody;
          if (params.comment) {
            msgBody = beginCell()
              .storeUint(0, 32) // op = 0 –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
              .storeStringTail(params.comment)
              .endCell();
          }
          
          // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const transfer = await this.wallet.createTransfer({
            seqno,
            secretKey: this.keyPair.secretKey,
            messages: [
              internal({
                to: toAddress,
                value: amount,
                bounce: false,
                body: msgBody
              })
            ],
            validUntil: Math.floor(Date.now() / 1000) + (params.timeout || 60), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 60 —Å–µ–∫—É–Ω–¥
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.client.sendExternalMessage(this.wallet, transfer);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const transferBoc = transfer.toBoc();
          const txHash = Buffer.from(transferBoc).toString('base64').substring(0, 44);
          
          console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. Hash: ${txHash}`);
          
          return {
            success: true,
            transactionHash: txHash,
            additionalData: {
              seqno,
              externalMessageCell: Buffer.from(transferBoc).toString('base64')
            }
          };
        } catch (error: any) {
          lastError = new Error(error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (attempt === maxRetries) {
            throw lastError;
          }
          
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (1s, 2s, 4s, ...)
          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 30000);
          console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ
      throw lastError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return {
        success: false,
        errorMessage: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
      };
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –µ—ë —Ö–µ—à—É
   * @param transactionHash –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ base64
   * @returns –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async checkTransactionStatus(transactionHash: string): Promise<TransactionStatus> {
    this.checkInitialization();
    
    try {
      if (!this.client || !this.wallet) {
        throw new Error("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      }
      
      const walletAddress = this.wallet.address;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const state = await this.client.getContractState(walletAddress);
      
      if (!state || !state.lastTransaction) {
        return TransactionStatus.PENDING;
      }
      
      // –í —Ç–µ–∫—É—â–µ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º COMPLETED –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return TransactionStatus.COMPLETED;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      return TransactionStatus.PROCESSING;
    }
  }
  
  /**
   * –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö–µ—à–µ–º
   * @param transactionHash –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param timeout –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60000 –º—Å = 1 –º–∏–Ω—É—Ç–∞)
   * @returns –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async waitForTransactionCompletion(transactionHash: string, timeout: number = 60000): Promise<TransactionStatus> {
    this.checkInitialization();
    
    const startTime = Date.now();
    let lastStatus = await this.checkTransactionStatus(transactionHash);
    
    // –°—á–µ—Ç—á–∏–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è COMPLETED
    let completedCounter = 0;
    
    while (
      (lastStatus === TransactionStatus.PENDING || 
       lastStatus === TransactionStatus.PROCESSING || 
       completedCounter < 3) && // –¢—Ä–µ–±—É–µ–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞ COMPLETED –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      Date.now() - startTime < timeout
    ) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED
      if (lastStatus === TransactionStatus.COMPLETED) {
        completedCounter++;
      } else {
        completedCounter = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å—Ç–∞—Ç—É—Å–µ
      }
      
      // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      const checkInterval = Math.min(1000 * Math.pow(1.5, completedCounter), 5000);
      await new Promise(resolve => setTimeout(resolve, checkInterval));
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      lastStatus = await this.checkTransactionStatus(transactionHash);
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${lastStatus}, —Å—á–µ—Ç—á–∏–∫: ${completedCounter}`);
    }
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–∞—É—Ç–∞
    if (Date.now() - startTime >= timeout && 
        (lastStatus === TransactionStatus.PENDING || lastStatus === TransactionStatus.PROCESSING)) {
      return TransactionStatus.TIMEOUT;
    }
    
    return lastStatus;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WalletAccount
   * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ
   */
  async getWalletAccount(): Promise<WalletAccount> {
    this.checkInitialization();
    
    if (!this.wallet || !this.keyPair) {
      throw new Error("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    const address = await this.getWalletAddress();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è walletStateInit
    const walletStateInit = Buffer.from(
      "te6ccgECFAEAAtQAART/APSkE/S88sgLAQIBYgIDA3rQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxVFds88uCCyPhDAcx/AcoAVUBQVCDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFgEwBARQqoEBAc8AFRhEsH/g"
    ).toString('base64');
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç WalletAccount
    return {
      address,
      chain: 'ton',
      publicKey: this.keyPair.publicKey.toString('hex'),
      walletStateInit
    };
  }
} 