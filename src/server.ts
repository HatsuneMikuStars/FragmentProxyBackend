import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import apiRoutes from './api/routes';
import { ENV_CONFIG, TON_WALLET_CONFIG, TON_API_CONFIG, FRAGMENT_CONFIG, TRANSACTION_MONITOR_CONFIG } from './config';
import { TonWalletService } from './wallet/TonWalletService';
import { FragmentStarsPurchaseService } from './services/fragmentStarsPurchaseService';
import { TonTransactionMonitor } from './services/tonTransactionMonitor';
import { FragmentApiClient } from './apiClient/fragmentApiClient';
import { initializeDatabase, ensureDatabaseReady, AppDataSource } from './database';
import { TransactionRepository } from './database/repositories/transaction.repository';
import path from 'path';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
 */
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet()); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use(cors()); // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use(express.json()); // –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.urlencoded({ extended: true })); // –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public
app.use(express.static(path.join(__dirname, '../public')));

// –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (ENV_CONFIG.IS_DEVELOPMENT && ENV_CONFIG.VERBOSE_HTTP_LOGGING) {
  app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
  });
}

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api', apiRoutes);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É–∂–±
let tonWalletService: TonWalletService;
let fragmentApiClient: FragmentApiClient;
let starsPurchaseService: FragmentStarsPurchaseService;
let transactionMonitor: TonTransactionMonitor;
let transactionRepository: TransactionRepository;
let isMonitoringRunning = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
  res.json({
    message: 'Fragment Proxy API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    version: '1.0.0',
    info: '–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥',
    transactionMonitor: transactionMonitor ? 
      { status: isMonitoringRunning ? 'running' : 'stopped' } : 
      { status: 'not initialized' }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async function startServer() {
  try {
    console.log('[API] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('[API] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await ensureDatabaseReady();
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactionRepository = new TransactionRepository(AppDataSource);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ TON –∫–æ—à–µ–ª—å–∫–∞
    tonWalletService = new TonWalletService();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await tonWalletService.initializeWallet({
      mnemonic: TON_WALLET_CONFIG.MNEMONIC,
      subwalletId: TON_WALLET_CONFIG.SUBWALLET_ID,
      useTestnet: TON_WALLET_CONFIG.USE_TESTNET,
      apiUrl: TON_WALLET_CONFIG.USE_TESTNET ? TON_WALLET_CONFIG.API_URL.TESTNET : TON_WALLET_CONFIG.API_URL.MAINNET,
      apiKey: TON_WALLET_CONFIG.API_KEY
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.set('tonWalletService', tonWalletService);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    const walletAddress = await tonWalletService.getWalletAddress();
    console.log(`üîë –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    const balance = await tonWalletService.getBalance();
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${Number(balance) / 1_000_000_000} TON`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fragment API –∫–ª–∏–µ–Ω—Ç–∞
    fragmentApiClient = new FragmentApiClient(
      FRAGMENT_CONFIG.COOKIES,
      FRAGMENT_CONFIG.BASE_URL
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    const account = await tonWalletService.getWalletAccount();
    starsPurchaseService = new FragmentStarsPurchaseService(
      FRAGMENT_CONFIG.COOKIES,
      account.address,
      account.publicKey,
      account.walletStateInit,
      FRAGMENT_CONFIG.BASE_URL
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    transactionMonitor = new TonTransactionMonitor(
      tonWalletService,
      starsPurchaseService,
      transactionRepository
    );
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç
    if (TRANSACTION_MONITOR_CONFIG.AUTO_START) {
      transactionMonitor.start();
      isMonitoringRunning = true;
      console.log('üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    }
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`
  üöÄ Fragment Proxy API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!
  üåç –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}
  üìù –†–µ–∂–∏–º: ${ENV_CONFIG.IS_DEVELOPMENT ? 'Development' : 'Production'}
  üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP: ${ENV_CONFIG.VERBOSE_HTTP_LOGGING ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
  üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${isMonitoringRunning ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
  üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 TON = ${TRANSACTION_MONITOR_CONFIG.STARS_PER_TON} –∑–≤–µ–∑–¥
  üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${TRANSACTION_MONITOR_CONFIG.MIN_AMOUNT} TON
  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (${process.env.DB_PATH || 'data/database.sqlite'})
      `);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
process.on('SIGINT', async () => {
  try {
    console.log('\n[API] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    if (transactionMonitor) {
      transactionMonitor.stop();
    }
    await AppDataSource.destroy();
    console.log('[API] –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É');
    process.exit(0);
  } catch (error) {
    console.error('[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    process.exit(1);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
startServer();

export default app; 