import { FragmentStarsPurchaseService } from './services/fragmentStarsPurchaseService';
import { FragmentApiClient } from './apiClient/fragmentApiClient';
import { TonWalletService } from './wallet/TonWalletService';
import { loadWalletConfig } from './wallet/config';
import { FRAGMENT_CONFIG, APP_CONFIG } from './config';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
async function main() {
    console.log("Fragment API Client - –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ TON –∫–æ—à–µ–ª–µ–∫");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const args = process.argv.slice(2);
    const username = args[0] || APP_CONFIG.DEFAULT_USERNAME; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
    const starsAmount = parseInt(args[1] || String(APP_CONFIG.DEFAULT_STARS_AMOUNT)); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    
    console.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–≤–µ–∑–¥: ${username}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: ${starsAmount}`);

    try {
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫—É–∫–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const cookies = FRAGMENT_CONFIG.COOKIES;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
        const fragmentClient = new FragmentApiClient(
            cookies,
            FRAGMENT_CONFIG.BASE_URL
        );
        
        console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        const walletConfig = await loadWalletConfig();
        console.log('   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        const walletService = new TonWalletService();
        await walletService.initializeWallet(walletConfig);
        console.log('   ‚úÖ –°–µ—Ä–≤–∏—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ –±–∞–ª–∞–Ω—Å
        const walletAddress = await walletService.getWalletAddress();
        const walletBalance = await walletService.getBalance();
        console.log(`   üìù –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}`);
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${Number(walletBalance) / 1_000_000_000} TON`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –ø–æ–º–æ—â—å—é —Ñ–∞–±—Ä–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        const purchaseService = await FragmentStarsPurchaseService.createFromWalletService(fragmentClient, walletService);
        console.log('   ‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        console.log(`\n2Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É ${starsAmount} –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥
        const result = await purchaseService.purchaseStarsAsync(username, starsAmount);
        
        console.log('\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏:');
        console.log(`   üìå –°—Ç–∞—Ç—É—Å: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
        
        if (result.error) {
            console.log(`   üìå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${result.error}`);
        }
        
        if (result.transactionHash) {
            console.log(`   üìå –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result.transactionHash}`);
        }
        
        if (result.status) {
            console.log(`   üìå –°—Ç–∞—Ç—É—Å: ${result.status}`);
        }
        
        if (result.starsAmount) {
            console.log(`   üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥: ${result.starsAmount}`);
        }
        
        if (result.amount) {
            console.log(`   üìå –°—É–º–º–∞ –≤ TON: ${result.amount}`);
        }

        console.log("\n–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.");
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞: ${(error as Error).message}`);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main().catch(error => {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
}); 